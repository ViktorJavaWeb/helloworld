/**
 * Created by Er on 26.07.2016.
 */
public class Lesson4 {
    public static void main(String[] args) {

        /*Задачи*/

        /*1. Создайте массив из всех нечётных чисел от 1 до 99, выведите его на экран в строку, а затем этот же массив выведите на экран
        тоже в строку, но в обратном порядке (99 97 95 93 … 7 5 3 1).*/

        /*2. Создайте массив из 15 случайных целых чисел из отрезка [0;9]. Выведите массив на экран. Подсчитайте сколько в массиве чётных
        элементов и выведете это количество на экран на отдельной строке.*/

        /*3. Для проверки остаточных знаний учеников после летних каникул, учитель младших классов решил начинать каждый урок с того,
        чтобы задавать каждому ученику пример из таблицы умножения, но в классе 15 человек, а примеры среди них не должны
        повторяться. В помощь учителю напишите программу, которая будет выводить на экран 15 примеров из таблицы умножения (от 2*2
        до 9*9, потому что задания по умножению на 1 и на 10 — слишком просты). При этом среди 15 примеров не должно быть
        повторяющихся (примеры 2*3 и 3*2 и им подобные пары считать повторяющимися).*/

        /*4. Создать двумерный массив из 6 строк по 7 столбцов в каждой из случайных целых чисел из отрезка [0;9].
        Вывести массив на экран.
        Преобразовать массив таким образом, чтобы на первом месте в каждой строке стоял её наибольший элемент. При этом изменять
        состав массива нельзя, а можно только переставлять элементы в рамках одной строки. Порядок остальных элементов строки не
        важен (т.е. можно соврешить только одну перестановку, а можно отсортировать по убыванию каждую строку). Вывести
        преобразованный массив на экран.*/

        /*5. Выясните экспериментальном путём, начиная с какого элемента последовательности Фибоначчи, вычисление с использованием
        рекурсии становится неприемлемым (занимает более минуты по времени).(Использовать для замера времени System.
        currentTimeMillis() который возвращает время в миллисекундах)*/

        /*6. Создайте в классе Circle метод, вычисляющий длину окружности.*/

        /*7. Создайте в классе Circle метод, перемещающий центр круга в случайную точку квадрата координатной плоскости с
        диагональю от [-99;-99] до [99;99]. Обратите внимание на то, что требуется создать обычный метод, применимый к
        уже существующему объекту, а не конструктор создающий новый объект.*/

        /*8. Измените в классе Circle конструктор по умолчанию так, чтобы в момент создания объекта с его помощью, координаты центра и
        радиус окружности пользователь вводил с клавиатуры.*/

        /*9. Создайте в классе Circle метод, вычисляющий расстояние между центрами двух окружностей.*/

        /*10. Создайте в классе Circle метод, проверяющий, касаются ли окружности в одной точке. Учтите, что возможен
        вариант, когда одна окружность содержится внутри другой и при этом всё равно возможно касание в одной точке.*/





    }
}
